strategy:
  matrix:
    linux_netcore3_1:
      imageName: 'ubuntu-latest'
      framework: netcoreapp3.1
    linux_net5:
      imageName: 'ubuntu-latest'
      framework: net5.0
    windows_netcore3_1:
      imageName: 'windows-latest'
      framework: netcoreapp3.1
    windows_net5:
      imageName: 'windows-latest'
      framework: net5.0

pool:
  vmImage: $(imageName)

steps:
    
- task: UseDotNet@2
  displayName: install dotnet core 3.1
  inputs:
    version: 3.1.x
    
- task: UseDotNet@2
  displayName: install dotnet 5
  inputs:
    version: 5.0.x
    
- task: DotNetCoreCLI@2
  displayName:  DotNetCoreCLI - Restore Solution
  inputs:
    command: "restore"
    projects: "NETCORE/*.sln"
  continueOnError: true

- task: DotNetCoreCLI@2
  displayName: DotNetCoreCLI - Build Solution
  inputs:
    command: "build"
    projects: "NETCORE/*.sln"
    arguments: "--configuration Release --no-restore"    
    
- task: DotNetCoreCLI@1
  displayName: Integration Tests $(framework)
  continueOnError: true
  inputs:
    command: "test"
    projects: "NETCORE/test/**/IntegrationTests.Tests.csproj"
    arguments: "--configuration Release --framework $(framework) --no-build -l trx --blame-hang --blame-hang-dump-type full --blame-hang-timeout 300000"

- task: DotNetCoreCLI@1
  displayName: Functional MVC Tests $(framework)
  continueOnError: true
  inputs:
    command: "test"
    projects: "NETCORE/test/**/*FunctionalTests.MVC.Tests.csproj"
    arguments: "--configuration Release --framework $(framework) --no-build -l trx"

- task: DotNetCoreCLI@1
  displayName: Unit Tests for AspNetCore $(framework)
  continueOnError: true
  inputs:
    command: "test"
    projects: "NETCORE/test/**/*AspNetCore.Tests.csproj"
    arguments: "--configuration Release --framework $(framework) --no-build -l trx"
    
- task: DotNetCoreCLI@1
  displayName: Unit Tests + Func Tests for WorkerService for AspNetCore $(framework)
  continueOnError: true
  inputs:
    command: "test"
    projects: "NETCORE/test/**/*WorkerService.Tests.csproj"
    arguments: "--configuration Release --framework $(framework) --no-build -l trx"

## Publish Test results

- task: PublishTestResults@2
  condition: always()
  inputs:
    testRunner: "VSTest"
    testResultsFiles: "**/*.trx"
    failTaskOnFailedTests: true

# Enable if we have hangs, crashes in tests 
#- task: PublishPipelineArtifact@1
#  inputs:
#    targetPath: "NETCORE/test/IntegrationTests.Tests/TestResults/"
#    artifactName: $(imageName).$(framework).dmp

#- task: DotNetCoreCLI@1
#  displayName: Package Nuget
#  inputs:
#    command: "pack"
#    projects: "NETCORE/src/**/**.csproj"
#    arguments: "--configuration Release --include-symbols --output $(build.artifactstagingdirectory)"

#- task: PublishBuildArtifacts@1
#  inputs:
#    PathtoPublish: "$(build.artifactstagingdirectory)"
#    ArtifactName: "drop"
#    ArtifactType: "Container"
