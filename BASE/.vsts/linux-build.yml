strategy:
  matrix:
    linux_netcore3_1:
      imageName: 'ubuntu-latest'
      framework: netcoreapp3.1
    linux_net5:
      imageName: 'ubuntu-latest'
      framework: net5.0
    linux_net6:
      imageName: 'ubuntu-latest'
      framework: net6.0
    windows_netcore3_1:
      imageName: 'windows-latest'
      framework: netcoreapp3.1
    windows_net5:
      imageName: 'windows-latest'
      framework: net5.0
    windows_net6:
      imageName: 'windows-latest'
      framework: net6.0

pool:
  vmImage: $(imageName)


steps:
    
- task: UseDotNet@2
  displayName: install dotnet core 3.1
  inputs:
    version: 3.1.x

- task: UseDotNet@2
  displayName: install dotnet 5.0
  inputs:
    version: '5.0.x'
    
- task: UseDotNet@2
  displayName: install dotnet 6
  inputs:
    version: 6.0.x
    includePreviewVersions: true

- task: DotNetCoreCLI@2
  displayName: DotNetCoreCLI - Restore Solution
  inputs:
    command: "restore"
    projects: "BASE/*.sln"

- task: DotNetCoreCLI@2
  displayName: DotNetCoreCLI - Build Solution
  inputs:
    command: "build"
    projects: "BASE/*.sln"
    arguments: "--configuration Release --no-restore"

- task: DotNetCoreCLI@2
  displayName: DotNetCoreCLI - Test $(framework)
  inputs:
    command: "test"
    projects: "BASE/Test/**/*.Tests.csproj"
    arguments: "--configuration Release --framework $(framework) --no-build -l trx -l console;verbosity=detailed --filter TestCategory!=WindowsOnly"

## Publish Test results

- task: PublishTestResults@2
  condition: always()
  inputs:
    testRunner: "VSTest"
    testResultsFiles: "**/*.trx"
    failTaskOnFailedTests: true
